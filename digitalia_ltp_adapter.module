<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\node\Entity\Node;
use Drupal\digitalia_ltp_adapter\MetadataExtractor;
use Drupal\digitalia_ltp_adapter\Utils;


/**
 * Transfer published objects to LTP system
 *
 * implements hook_entity_presave()
 */
function digitalia_ltp_adapter_entity_presave(EntityInterface $entity)
{

	$utils = new Utils();
	//dpm(print_r($utils->getEnabledContentTypes(), true));

	if (!$utils->getEnabledContentTypes()[$entity->bundle()]) {
		return;
	}

	$extractor = new MetadataExtractor();
	$system_service_name = $utils->getConfig()->get('enabled_ltp_systems');
	dpm("enabled system: '" . $system_service_name . "'");
	$ltp_system = \Drupal::service($system_service_name);

	dpm("Entity update hook");
	\Drupal::logger('digitalia_ltp_adapter')->debug("Entity update hook");
	\Drupal::logger('digitalia_ltp_adapter')->debug("Bundle: " . $entity->bundle());


	// Don't archive when writing back information after ingest
	if ($ltp_system->cleanWriteback($entity)) {
		return;
	}

	$extractor->updateEntity($entity, $extractor::UPDATE_CREATE);
}

/**
 * Transfer deleted objects to LTP system and mark them as deleted
 *
 * implements hook_entity_predelete()
 */
function digitalia_ltp_adapter_entity_predelete(EntityInterface $entity)
{
	dpm("Entity predelete hook");
	\Drupal::logger('digitalia_ltp_adapter')->debug("Entity predelete hook");
	\Drupal::logger('digitalia_ltp_adapter')->debug("Bundle: " . $entity->bundle());

	$utils = new DigitaliaLtpUtils();

	if (!$utils->getEnabledContentTypes()[$entity->bundle()]) {
		return;
	}

	$utils->updateEntity($entity, $utils::UPDATE_DELETE);
}

/**
 * implements hook_cron()
 */
function digitalia_ltp_adapter_cron()
{
	dpm("Cron hook");
}
