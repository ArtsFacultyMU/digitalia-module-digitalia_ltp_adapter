<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\node\Entity\Node;
use Drupal\digitalia_ltp_adapter\MetadataExtractor;
use Drupal\digitalia_ltp_adapter\Utils;




/**
 * Transfer published objects to LTP system. Hook entity_presave can not be used,
 * some tokens are not available (e. g. [node:vid]).
 *
 * implements hook_entity_insert()
 */
function digitalia_ltp_adapter_entity_insert(EntityInterface $entity)
{

	$utils = new Utils();

	// Stop processing if content type is not enabled
	if (!$utils->getEnabledContentTypes()[$entity->bundle()]) {
		return;
	}

	dpm("Entity update hook");
	\Drupal::logger('digitalia_ltp_adapter')->debug("Entity insert hook");
	\Drupal::logger('digitalia_ltp_adapter')->debug("Bundle: " . $entity->bundle());

	$extractor = new MetadataExtractor();
	$extractor->updateEntity($entity, $extractor::UPDATE_CREATE);
}

/**
 * Transfer published objects to LTP system. Hook entity_presave can not be used,
 * some tokens are not available (e. g. [node:vid]).
 *
 * implements hook_entity_update()
 */
function digitalia_ltp_adapter_entity_update(EntityInterface $entity)
{

	$utils = new Utils();

	// Stop processing if content type is not enabled and when writing back information after ingest
	if (!$utils->getEnabledContentTypes()[$entity->bundle()] || $utils->checkLock($utils->getFullEntityUID($entity))) {
		return;
	}

	dpm("Entity update hook");
	\Drupal::logger('digitalia_ltp_adapter')->debug("Entity update hook");
	\Drupal::logger('digitalia_ltp_adapter')->debug("Bundle: " . $entity->bundle());

	$extractor = new MetadataExtractor();
	$extractor->updateEntity($entity, $extractor::UPDATE_CREATE);
}

/**
 * Transfer deleted objects to LTP system and mark them as deleted
 *
 * implements hook_entity_predelete()
 */
function digitalia_ltp_adapter_entity_predelete(EntityInterface $entity)
{
	$utils = new Utils();

	if (!$utils->getEnabledContentTypes()[$entity->bundle()]) {
		return;
	}

	dpm("Entity predelete hook");
	\Drupal::logger('digitalia_ltp_adapter')->debug("Entity predelete hook");
	\Drupal::logger('digitalia_ltp_adapter')->debug("Bundle: " . $entity->bundle());

	$extractor = new MetadataExtractor();
	$extractor->updateEntity($entity, $extractor::UPDATE_DELETE);
}

/**
 * implements hook_cron()
 */
function digitalia_ltp_adapter_cron()
{
	dpm("Cron hook");
}
